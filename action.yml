name: "Astarte Local Cluster"
description: "Brings up a fully functional local Astarte Cluster and its tooling for CI purposes."

branding:
  color: blue
  icon: share-2

inputs:
  astarte_namespace:
    description: "The Kubernetes namespace where Astarte will be installed. Defaults to `astarte`"
    required: false
    default: "astarte"
  astarte_chart_version:
    description: "The Astarte Operator Helm Chart version to use. Defaults to ^24.5.0"
    required: false
    default: "^24.5.0"
  astartectl_version:
    description: "The astartectl CLI version to use. Defaults to ^24.5.1"
    required: false
    default: "24.5.2"
  astarte_version:
    description: "The Astarte version to install. Defaults to ^1.2.0"
    required: false
    default: "1.2.0"
  astarte_realm:
    description: "The Astarte realm to create. Defaults to `test`. If empty, no realm will be created and the realm_key output will be empty."
    required: false
    default: "test"
  kind_version:
    description: "KinD version to use. It is advised to leave the default unless you're trying to use a very specific Astarte version"
    required: false
    default: "v0.23.0"
  kind_node_image:
    description: "KinD node to use. It is advised to leave the default unless you're trying to use a very specific Astarte version"
    required: false
    default: "kindest/node:v1.30.0@sha256:047357ac0cfea04663786a612ba1eaba9702bef25227a794b52890dd8bcd692e"

outputs:
  housekeeping_key:
    description: "The Housekeeping private key of the new cluster"
    value: ${{ steps.load-housekeeping-key.outputs.housekeeping-key }}
  realm_key:
    description: "The Realm private key of the newly created Realm."
    value: ${{ steps.load-realm-key.outputs.realm-key }}

runs:
  using: "composite"
  steps:
    - name: Setup Helm
      uses: azure/setup-helm@v4.0.0
    - name: Set nf_conntrack_max value
      shell: bash
      # This step is required to avoid CrashLoopBackOff for kube-proxy
      # see https://github.com/kubernetes-sigs/kind/issues/2240#issuecomment-838510890
      run: |
        sudo sysctl net/netfilter/nf_conntrack_max=131072
    - name: Setup custom host for Astarte autotest API
      shell: bash
      run: echo "127.0.0.1 api.autotest.astarte-platform.org" | sudo tee -a /etc/hosts
    - name: Setup custom host for Astarte autotest Broker
      shell: bash
      run: echo "127.0.0.1 broker.autotest.astarte-platform.org" | sudo tee -a /etc/hosts
    - uses: helm/kind-action@v1.9.0
      with:
        version: ${{ inputs.kind_version }}
        node_image: ${{ inputs.kind_node_image }}
        config: "${{ github.action_path }}/kind-config.yml"
    - name: Ensure KinD is up
      shell: bash
      run: |
        kubectl cluster-info
        kubectl get pods -n kube-system
    - name: Install Operator and its dependencies
      shell: bash
      run: ${{ github.action_path }}/install-operator.sh "${{ inputs.astarte_chart_version }}"
    - name: Setup Astarte Kubernetes namespace
      shell: bash
      run: kubectl create namespace "${{ inputs.astarte_namespace }}"
    - name: Setup SSL Certificates
      shell: bash
      run: ${{ github.action_path }}/setup-ssl.sh "${{ github.action_path }}/ca.json" "${{ github.action_path }}/cert.json" "${{ inputs.astarte_namespace }}"
    - name: Setup Astarte
      shell: bash
      run: ${{ github.action_path }}/setup-astarte.sh "${{ inputs.astarte_version }}" "${{ inputs.astarte_namespace }}" "${{ github.action_path }}/adi.yml" "${{ github.action_path }}/broker-service.yml" "${{ github.action_path }}/astarte.yaml" "${{ inputs.astartectl_version }}"
    - name: Create Realm Keys
      shell: bash
      run: cd "${{ github.action_path }}" && astartectl utils gen-keypair "${{ inputs.astarte_realm }}" && cd -
    - name: load-realm-key
      shell: bash
      env:
        REALM_KEY: "${{ github.action_path }}/${{ inputs.astarte_realm }}_private.pem"
      run: |
        {
          echo 'realm-key<<EOF'
          cat  "$REALM_KEY"
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"
    - name: Get housekeeping key
      shell: bash
      run: kubectl get secrets -n "${{ inputs.astarte_namespace }}" astarte-housekeeping-private-key -o jsonpath={.data.private-key} | base64 -d > "${{ github.action_path }}"/housekeeping_key.pem
    - id: load-housekeeping-key
      shell: bash
      env:
        HOUSEKEEPING_KEY: "${{ github.action_path }}/housekeeping_key.pem"
      run: |
        {
          echo "housekeeping-key<<EOF"
          cat "$HOUSEKEEPING_KEY"
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"
    - name: Create Astarte Realm
      shell: bash
      run: astartectl housekeeping realms create -y "${{ inputs.astarte_realm }}" -u http://api.autotest.astarte-platform.org --realm-public-key "${{ github.action_path }}/${{ inputs.astarte_realm }}"_public.pem -k "${{ github.action_path }}/housekeeping_key.pem"
    - name: Wait for the realm creation to propagate
      shell: bash
      run: |
        for i in {1..6}; do
            if [[ -n $(astartectl housekeeping realms show "${{ inputs.astarte_realm }}" -u http://api.autotest.astarte-platform.org -k "${{ github.action_path }}/housekeeping_key.pem") ]]; then
                echo "Astarte Realm created successfully"
                exit 0
            else
                sleep 5
            fi
        done

        echo "Astarte Realm creation timed out"
        exit 1
    - name: create astartectl cluster and context
      shell: bash
      run: |
        export CLUSTER_NAME=$(kubectl config current-context)
        mkdir -p ~/.config/astarte
        echo 'context: ""' >> ~/.config/astarte/astartectl.yaml
        astartectl config clusters create $CLUSTER_NAME \
          --api-url http://api.autotest.astarte-platform.org \
          --housekeeping-key ${{ github.action_path }}/housekeeping_key.pem
        export CONTEXT_NAME=$CLUSTER_NAME
        astartectl config contexts create $CONTEXT_NAME \
          --cluster $CLUSTER_NAME \
          --realm-name ${{ inputs.astarte_realm }} \
          --realm-private-key ${{ github.action_path }}/${{ inputs.astarte_realm }}_private.pem
        astartectl config contexts update $CONTEXT_NAME --activate
